#!/bin/bash
set -e

echo "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ MongoDB..."

echo "üìã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."
docker compose down -v >/dev/null 2>&1 || true

echo "üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–±–µ–∑ mongos –∏ app)..."
docker compose up -d configSrv shard1 shard2

echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose ps

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
wait_for_mongo() {
    local service=$1
    local port=$2
    local max_attempts=30
    local attempt=0
    
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ $service –Ω–∞ –ø–æ—Ä—Ç—É $port..."
    
    while [ $attempt -lt $max_attempts ]; do
        if docker compose exec -T $service mongosh --port $port --quiet --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
            echo "‚úÖ $service –≥–æ—Ç–æ–≤"
            return 0
        fi
        attempt=$((attempt + 1))
        echo "üîÑ –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts –¥–ª—è $service..."
        sleep 2
    done
    
    echo "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ $service"
    return 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_mongo "configSrv" "27017"
wait_for_mongo "shard1" "27018" 
wait_for_mongo "shard2" "27019"

echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Config Server..."
docker compose exec -T configSrv mongosh --port 27017 --quiet <<EOF
rs.initiate({
  _id : "config_server",
  configsvr: true,
  members: [{ _id : 0, host : "configSrv:27017" }]
});
EOF

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Config Server –∫–∞–∫ RS
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Config Server RS..."
for i in {1..30}; do
    if docker compose exec -T configSrv mongosh --port 27017 --quiet --eval "rs.status().ok" 2>/dev/null | grep -q "1"; then
        echo "‚úÖ Config Server RS –≥–æ—Ç–æ–≤"
        break
    fi
    echo "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ Config Server RS... ($i/30)"
    sleep 2
done

echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Shard 1..."
docker compose exec -T shard1 mongosh --port 27018 --quiet <<EOF
rs.initiate({
  _id : "shard1",
  members: [{ _id : 0, host : "shard1:27018" }]
});
EOF

echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Shard 2..."
docker compose exec -T shard2 mongosh --port 27019 --quiet <<EOF
rs.initiate({
  _id : "shard2",
  members: [{ _id : 0, host : "shard2:27019" }]
});
EOF

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —à–∞—Ä–¥–æ–≤
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Shard RS..."
for i in {1..30}; do
    shard1_ready=$(docker compose exec -T shard1 mongosh --port 27018 --quiet --eval "rs.status().ok" 2>/dev/null | grep -q "1" && echo "yes" || echo "no")
    shard2_ready=$(docker compose exec -T shard2 mongosh --port 27019 --quiet --eval "rs.status().ok" 2>/dev/null | grep -q "1" && echo "yes" || echo "no")
    
    if [ "$shard1_ready" = "yes" ] && [ "$shard2_ready" = "yes" ]; then
        echo "‚úÖ –í—Å–µ Shard RS –≥–æ—Ç–æ–≤—ã"
        break
    fi
    echo "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ Shard RS... ($i/30) [Shard1: $shard1_ready, Shard2: $shard2_ready]"
    sleep 2
done

# –ó–∞–ø—É—Å–∫–∞–µ–º mongos_router –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Config Server
echo "üöÄ –ó–∞–ø—É—Å–∫ mongos_router..."
docker compose --profile manual up -d mongos_router

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ mongos
wait_for_mongo "mongos_router" "27020"

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è..."
docker compose exec -T mongos_router mongosh --port 27020 --quiet <<EOF
sh.addShard("shard1/shard1:27018");
sh.addShard("shard2/shard2:27019");
sh.enableSharding("somedb");
sh.shardCollection("somedb.helloDoc", { "name" : "hashed" });
EOF

echo "üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
docker compose exec -T mongos_router mongosh --port 27020 --quiet <<EOF
use somedb
for(var i = 0; i < 1000; i++) db.helloDoc.insertOne({age:i, name:"ly"+i})
EOF

echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
echo "üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"
docker compose exec -T mongos_router mongosh --port 27020 --quiet <<EOF
use somedb
db.helloDoc.countDocuments()
EOF

echo "üìä –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ Shard 1:"
docker compose exec -T shard1 mongosh --port 27018 --quiet <<EOF
use somedb
db.helloDoc.countDocuments()
EOF

echo "üìä –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ Shard 2:"
docker compose exec -T shard2 mongosh --port 27019 --quiet <<EOF
use somedb
db.helloDoc.countDocuments()
EOF

echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
docker compose --profile manual up -d pymongo_api

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
sleep 10

echo "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://localhost:8080"
echo "üìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose ps
